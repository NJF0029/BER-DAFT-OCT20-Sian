If we need to merge the two data frames … 
df_3 = pd.concat([df_1, df_2])

Right, we now have our data. 
Next stage will normally be Wrangling ie preparing, reshaping and cleaning our data to suit our purposes - typical wrangling steps - via python using pandas
a) filter the data / select the subset of rows or columns you need 
c) amend or set data types
d) ensure data in those columns is formatted consistently with the data type - eg numerical. Make sure everything is actually a number!
e) deal with duplicate rows 
… more to come but lets start there 
First lets take a look at our data in full - open in excel / csv reader or any tool of your choice
WB What do you already know about the data??

How to delete columns 
data = data.drop(['tcode'], axis =1)
Rename headers 
data = data.rename(columns={ 'controln':'id','hv1':'median_home_val', 'ic1':'median_household_income'})
Rearrange headers
data=data[['controln', 'state', 'gender', 'hv1', 'hvp1',
       'pobc1', 'pobc2','avggift', 'tcode', 'target_d','ic1','ic2','ic3','ic4','ic5']]
(We could also drop columns by just not including them in the list of columns for the target data frame)

Now we have a data frame we can slice it - as in filter in on data we want to see - eg only female donors 
data[data[‘gender']==‘F’]

Or check how much bad data we have in the gender column 
data[data[‘gender'].isin(['M', 'F'])]

We can filter by more than one column at once - eg all men living in Florida 
data[(data["state"]=="FL") & (data["gender"]=='M’)]
Or 
data.query('gender=="M" & state=="FL" ‘)
https://www.geeksforgeeks.org/python-filtering-data-with-pandas-query-method/

Maybe we can filter to a subset of data based on quantitative column, eg avg gift > 15 - how could we do that?
 data[data[‘avggift']>15]

This is just an in memory / temp filter, not updating the data frame. If we wanted to update it, we would need to use the data = structure, ie. 
data=data[data[‘avggift']>15]

Activity 2 - students - work with data frame (merged)

Remember to create checkpoints by using the Save button in Jupyter notebook 

Recommendation - before making data change changes it could be an idea to create a temporary version of your data frame, to return to or use to experiment 

tempdataset=data.copy()
