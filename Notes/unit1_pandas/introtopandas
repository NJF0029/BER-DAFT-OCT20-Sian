
What we will do with pandas primarily can be summarised as three typical data analyst steps : 
EXPLORE, CLEAN, PROCESS 

If you’re nervous in getting started with pandas lets talk about what you are familiar with 
* SQL - equivalent syntax
* R - similar functionality 
* Working with excel / spreadsheets - you know how data is managed in a tabular format and have probably written formulae and functions 

7. What’s a data frame 
WB Core concept - data frame - whiteboard Rows and Columns 


Re launch clean python for pandas — Lets try this together -  from term, cd to where you want to work and type in command Jupyter notebook to launch 
Which directory?? For me - I’m going to navigate to where my activity files are. Have you downloaded the files from LMS or are you using a forked repo from git hub? Either way, which directory are those in. New python notebook. Name it logical eg reading data with pd 1  

8. To keep building our comfort level with Jupyter, lets look at the commands we might use in Jupyter- Ctrl + Shift + P

Terminology : 
* A kernel is a “computational engine” that executes the code contained in a notebook document.
* A cell is a container for text to be displayed in the notebook or code to be executed by the notebook’s kernel.
* # to leave a comment and ensure it isn’t run



Import numpy as np 
Import pandas as pd 
Shortened name just helps us reference the library in functions 
First off lets look at the data - use grepper- google  ‘panda view csv’ - diff file types and how to read 
pd.read_csv(‘csvname’)
pd.set_option('display.max_rows', 6) - will only display 6 rows of data (why 6 … 0-5 in the index) 
File1 = pd.read_csv(‘csvname’).  Alias
File1.head display top n rows

Try to read file 2 without defining the separator. Can read in moped. All jumbled in python. Why? 
Tab =  sep='\t' or multi space = sep='\s+'
file2 = pd.read_csv('file2.txt', sep = '\t')
file2.shape - how many columns and rows we have without doing a full read 
Task - Need to define a data frame which includes the data from files 1 &2 
Columns look the same 
Define the headers:
column_names = file1.columns
data = pd.DataFrame(columns=column_names)
data.head()
Bring in file1:
data = pd.concat([data,file1], axis=0)
data.head()
Add file 2 contents 
data = pd.concat([data,file2], axis=0)
Data.shape
Should be no of columns and rows from file  1 + 2
What if we had to standardise column names ? 
cols = []
for i in range(len(data.columns)):
    cols.append(data.columns[i].lower())
data.columns = cols

# renaming columns
data = data.rename(columns={ 'controln':'id','hv1':'median_home_val', 'ic1':'median_household_income’})
I would prefer lower case column headers - less shouty 
data.columns= data.columns.str.lower()

Activity 1 - students - work with files 3 and 4 only 
You will concat your class build data frame 
with data from files 3 and 4 
